"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dbDelete = exports.dbUpdate = exports.dbFindOne = exports.dbFind = exports.dbInsert = exports.dbInit = void 0;
const lib_js_1 = require("./libs/lib.js");
const fs_1 = require("fs");
let dbPath = "";
let cacheData = null;
const _readCollection = (collection) => {
    try {
        cacheData = JSON.parse((0, fs_1.readFileSync)(`${dbPath}/${collection}.json`).toString());
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            (0, fs_1.writeFileSync)(`${dbPath}/${collection}.json`, "{}");
            cacheData = {};
        }
    }
};
const _saveCollection = (collection) => {
    try {
        (0, fs_1.writeFileSync)(`${dbPath}/${collection}.json`, JSON.stringify(cacheData));
        cacheData = null;
    }
    catch (err) {
        console.log(err);
    }
};
const _verify = () => {
    if (cacheData === null)
        return false;
    if (!dbPath)
        return false;
    return true;
};
//Init
/**
 * Init your db path. required
 * @param path absolute path of your db folder
 */
const dbInit = (path) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        if (!path)
            throw "No path specified, please specify absolute path to your db folder.";
        dbPath = `${path}/db`;
        (0, fs_1.readdirSync)(`${dbPath}`);
    }
    catch (err) {
        if (err.code === 'ENOENT')
            (0, fs_1.mkdirSync)(`${dbPath}`);
    }
});
exports.dbInit = dbInit;
//Insert
const dbInsert = (collection, data) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        if (!collection)
            throw "Collection not specified";
        if (!data)
            throw "Data not specified";
        if (!((0, lib_js_1.isObject)(data) || (0, lib_js_1.isArray)(data)))
            throw "Data should be an Object";
        _readCollection(collection);
        if (!_verify())
            throw "DB is not initialized properly";
        if ((0, lib_js_1.isObject)(data)) {
            const id = (0, lib_js_1.newID)();
            cacheData[id] = Object.assign({ _id: id }, data);
        }
        if ((0, lib_js_1.isArray)(data)) {
            data.forEach((d) => {
                const id = (0, lib_js_1.newID)();
                cacheData[id] = Object.assign({ _id: id }, d);
            });
        }
        _saveCollection(collection);
    }
    catch (err) {
        console.log(err);
    }
});
exports.dbInsert = dbInsert;
//Find
/**
 *
 * @param collection
 * @param conditions Condition should be an Object: ex {_id: string } { _id: string[]}
 * @returns
 */
const dbFind = (collection, conditions) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (!collection)
                throw "Collection not specified";
            if (!((0, lib_js_1.isObject)(conditions)))
                throw "Data should be an Object";
            _readCollection(collection);
            if (!_verify())
                throw "DB is not initialized properly";
            else {
                const results = [];
                if (Object.keys(conditions).length === 0) {
                    for (let _id in cacheData)
                        results.push(cacheData[_id]);
                    resolve(results);
                    return;
                }
                for (let _id in cacheData) {
                    let valid = true;
                    for (let field in conditions) {
                        valid = (0, lib_js_1._condi)(field, cacheData[_id], conditions[field]);
                        if (!valid)
                            break;
                    }
                    if (valid)
                        results.push(cacheData[_id]);
                }
                resolve(results);
            }
        }
        catch (err) {
            console.log(err);
            reject(err);
        }
    }));
});
exports.dbFind = dbFind;
const dbFindOne = (collection, conditions) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (!collection)
                throw "Collection not specified";
            if (!((0, lib_js_1.isObject)(conditions)))
                throw "Data should be an Object";
            _readCollection(collection);
            if (!_verify())
                throw "DB is not initialized properly";
            else {
                let result = {};
                if (Object.keys(conditions).length === 0) {
                    for (let _id in cacheData) {
                        result = cacheData[_id];
                        break;
                    }
                    resolve(result);
                    return;
                }
                for (let _id in cacheData) {
                    let valid = true;
                    for (let field in conditions) {
                        valid = (0, lib_js_1._condi)(field, cacheData[_id], conditions[field]);
                        if (!valid)
                            break;
                    }
                    if (valid) {
                        result = cacheData[_id];
                        break;
                    }
                }
                resolve(result);
            }
        }
        catch (err) {
            console.log(err);
            reject(err);
        }
    }));
});
exports.dbFindOne = dbFindOne;
//update
/**
 *
 * @param collection
 * @param conditions Should be an Object
 * @param data Should be an Object
 * @returns
 */
const dbUpdate = (collection, conditions, data, newDoc = false) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (!collection)
                throw "Collection not specified";
            if (!((0, lib_js_1.isObject)(conditions)))
                throw "Data should be an Object";
            _readCollection(collection);
            if (!_verify())
                throw "DB is not initialized properly";
            else {
                const stats = { modified: 0, new: 0 };
                if (Object.keys(conditions).length === 0) {
                    for (let _id in cacheData) {
                        for (let field in data) {
                            cacheData[_id][field] = data[field];
                        }
                        stats.modified++;
                    }
                    _saveCollection(collection);
                    resolve(stats);
                    return;
                }
                for (let _id in cacheData) {
                    let valid = true;
                    for (let field in conditions) {
                        valid = (0, lib_js_1._condi)(field, cacheData[_id], conditions[field]);
                        if (!valid)
                            break;
                    }
                    if (valid) {
                        for (let field in data) {
                            cacheData[_id][field] = data[field];
                        }
                        stats.modified++;
                    }
                }
                if (newDoc) {
                    const id = (0, lib_js_1.newID)();
                    cacheData[id] = { _id: id };
                    for (let field in data)
                        cacheData[id][field] = data[field];
                    for (let condi in conditions) {
                        if ((0, lib_js_1.isObject)(condi))
                            continue;
                        cacheData[id][condi] = conditions[condi];
                    }
                    stats.new++;
                }
                _saveCollection(collection);
                resolve(stats);
            }
        }
        catch (err) {
            console.log(err);
            reject(err);
        }
    }));
});
exports.dbUpdate = dbUpdate;
//delete
const dbDelete = (collection, conditions) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (!collection)
                throw "Collection not specified";
            if (!((0, lib_js_1.isObject)(conditions)))
                throw "Data should be an Object";
            _readCollection(collection);
            if (!_verify())
                throw "DB is not initialized properly";
            else {
                const stats = { deleted: 0 };
                if (Object.keys(conditions).length === 0) {
                    for (let _id in cacheData) {
                        delete cacheData[_id];
                        stats.deleted++;
                    }
                    _saveCollection(collection);
                    resolve(stats);
                    return;
                }
                for (let _id in cacheData) {
                    let valid = true;
                    for (let field in conditions) {
                        valid = (0, lib_js_1._condi)(field, cacheData[_id], conditions[field]);
                        if (!valid)
                            break;
                    }
                    if (valid) {
                        delete cacheData[_id];
                        stats.deleted++;
                    }
                }
                _saveCollection(collection);
                resolve(stats);
            }
        }
        catch (err) {
            console.log(err);
            reject(err);
        }
    }));
});
exports.dbDelete = dbDelete;
